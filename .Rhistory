remotes::install_github("armcompanion")
install.packages('xaringan')
names(xaringan:::list_css())
?emo
??emo
install.packages("xaringanthemer")
getwd()
## {background-image="https://github.com/nikita-telkar/PHB/blob/main/static/title_slide.png" background-size = "contain"}
library(Rsubread)
library(here)
here::here("/Volumes/GoogleDrive/My Drive/UBC Docs/Volunteer/TOG/PrecisionHealth_Bootcamp/Applied_RNA-seq")
aligned <- readRDS(here::here("data", "BAM_R_obj.RDS"))
here::here()
here::here("/Volumes/GoogleDrive/My Drive/UBC Docs/Volunteer/TOG/PrecisionHealth_Bootcamp/Applied_RNA-seq")
here::here()
here::here("/Users/nikitatelkar/Github/Applied_RNAseq")
knitr::include_graphics(here::here("static", "featurecounts_output.png"))
here::here("/Users/nikitatelkar/Github/Applied_RNAseq")
knitr::include_graphics(here::here("static", "featurecounts_output.png"), error = FALSE)
knitr::include_graphics(here::here("static", "featurecounts_output.png"), error = FALSE)
here::here("/Users/nikitatelkar/Github/Applied_RNAseq")
knitr::include_graphics(here::here("static", "featurecounts_output.png"), error = FALSE)
aligned <- readRDS(here::here("data", "BAM_R_obj.RDS"))
here::here("/Users/nikitatelkar/Github/Applied_RNAseq")
here::here()
setwd("~/Github/Applied_RNAseq")
knitr::include_graphics(here::here("static", "featurecounts_output.png"), error = FALSE)
aligned <- readRDS(here::here("data", "BAM_R_obj.RDS"))
here::here()
aligned <- readRDS("data/BAM_R_obj.RDS"))
aligned <- readRDS("data/BAM_R_obj.RDS")
setwd("~/Github/Applied_RNAseq")
aligned <- readRDS("data/BAM_R_obj.RDS")
# aligned <- readRDS(here::here("data", "BAM_R_obj.RDS"))
expression_counts <- aligned$counts
head %>%
as_tibble(counts)
library(tidyverse)
setwd("~/Github/Applied_RNAseq")
aligned <- readRDS("data/BAM_R_obj.RDS")
# aligned <- readRDS(here::here("data", "BAM_R_obj.RDS"))
expression_counts <- aligned$counts
head %>%
as_tibble(counts)
counts %>%
head() %>%
as_tibble()
library(tidyverse)
setwd("~/Github/Applied_RNAseq")
aligned <- readRDS("data/BAM_R_obj.RDS")
# aligned <- readRDS(here::here("data", "BAM_R_obj.RDS"))
expression_counts <- aligned$counts
expression_counts %>%
head() %>%
as_tibble()
colnames(expression_counts) <- "HG00097_counts"
library(tidyverse)
setwd("~/Github/Applied_RNAseq")
aligned <- readRDS("data/BAM_R_obj.RDS")
# aligned <- readRDS(here::here("data", "BAM_R_obj.RDS"))
expression_counts <- aligned$counts
colnames(expression_counts) <- "HG00097_counts"
expression_counts %>%
head() %>%
as_tibble()
library(here)
library(formatR)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=10))
.libPaths()
# if you have a specific folder where you have your R packages stored, set that folder as your library path:
# .libPaths("/scratch/tr-precisionhealth-1/Workshops/RNA-seq/R_Libs_4.2.0/")
library(tidyverse)
library(here)
library(rmarkdown)
library(knitr)
#formatting packages
library(kableExtra)
library(janitor)
library(scales)
library(ggpubr)
eNorm <- read.delim(here::here("data", "eNorm.txt"), sep = "\t")
eNorm <- eNorm %>%
column_to_rownames(var = "gene")
pDat <- read.delim(here::here("data", "GSE157103_formatted_pDat.txt"), sep = "\t")
pDat <- pDat %>%
column_to_rownames(var = "ID")
#transforming eNorm values to log2(x)+1
e_log2 <- log2(eNorm + 1)
#transposing our log(x+1) transposed data frame, so that the columns become the rows, and the rows become columns. As we want to check the variance driven by the genes, and not the samples, we transpose the dataframe to have the columns as the samples, and the rows as the genes, as the PCA function performs column-wise applications, not row-wise.
t_log2 <- as.data.frame(t(e_log2))
# DON'T OPEN this df, as it might crash R
dim(t_log2)
#As our data has already been normalized, we don't want to scale it further. We do however, want to centre it - meaning standardizing the upper and lower limits of the distribution of our values
pca <- prcomp(t_log2, scale = FALSE, center = TRUE)
summary(pca)
screeplot(pca)
# -- COPY - PASTE --
#dataframe with all PCs, their variance, and cumulative variance of all PCs
summary <- data.frame(PC = 1:126, var_explained = (pca$sdev)^2 / sum((pca$sdev)^2),
cumulative = cumsum(pca$sdev^2 / sum(pca$sdev^2))
)
summary <- summary %>%
mutate(cumulative_perc = cumulative*100)
# -- --
#usually we only consider the first 30 PCs
summary <- summary[1:30,]
#different ways to represent the same data
summary %>%
ggplot(aes(x = sort(as.factor(PC)), y = var_explained)) +
geom_bar(stat = "identity", fill = "forest green") +
# geom_text(aes(label = round(var_explained, digits = 2), vjust = -0.8), size = 2) +
theme_minimal() +
labs(title = "Variance Explained by each PC")
BiocManager::install("biomaRt")
BiocManager::install("clusterProfiler")
